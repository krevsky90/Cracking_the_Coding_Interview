info:
https://refactoring.guru/ru/design-patterns/command

idea:
Есть Invoker
Command
Receiver (executor)

NOTE:
1.1) backup состояния перед применением команды.
    его логично хранить в самой команде (храним prevColor в ChangeColorCommand). тогда легко его восстанавливать прямо тут методом undo()
    ИЛИ можно хранить снепшот всего изменяемого объекта (если он умеет делать сам свои снепшоты - см след паттерн Memento!)
        в этом случае можно сделать абстрактный класс AbstractCommand с методами:
            saveBackup, чтобы создавать снепшот перед вызовом метода receiver-a
            undo, к-ый будет восстанавливать состояние из снепшота
            а сам ссылку на снепшот можно хранить в поле AbstractCommand

1.2) метод saveBackup - д б в команде
    если сохраняем только частичные изменения объекта => каждая команда реализует свой бекап
    если сохраняем снепшот (или все команды меняют состояние объекта полностью (если, например, состояние = одна строка),
        то, как сказано выше, реализуем этот метод в абстрактном классе команд

2) (ссылку на) history команд:
    либо в команде (поле в AbstractCommand)
    либо в Client-е, к-ый создает команды, invoke-ов (кнопки), receiver-ов...
        НО как тогда сохранять исполняемую команду в history? придется иметь ссылку из команды на Client! и задавать ее при создании команды

    так что в любом случае команда должна мочь получить history (либо хранив ее прямо у себя, либо через объект Client, внутри к-ого эта история)

    Полученная history нужна, чтобы
    a) сохранять текущую команду в history (во время ее исполнения)
    b) доставать ее в команде UndoCommand и вызывать undo() метод верхней исполненной команды.

Внимание!
UndoCommand # subExecute() вызывает undo() метод последней исполненной команды!
UndoCommand # undo() - пустой! (я так считаю)

3) сохранение исполненной команды в историю можно делать в конце реализации метода execute() каждой из команд,
    НО можно вынести это в AbstractCommand класс (см saveCommandToHistory())
        НО тогда надо следить, чтобы НЕ вставить в историю команду UndoCommand!


Применимость:
1) Когда вы хотите параметризовать объекты выполняемым действием.
   Команда превращает операции в объекты. А объекты можно передавать, хранить и взаимозаменять внутри других объектов.

2) Когда вы хотите ставить операции в очередь, выполнять их по расписанию или передавать по сети.

!!! 3) Когда вам нужна операция отмены.

4) когда нужно вызывать команды не прямо сейчас, а потом и в каком-то определенном порядке (очередь)