info:
https://refactoring.guru/ru/design-patterns/strategy

idea:
паттерн проектирования, который определяет семейство схожих алгоритмов и помещает каждый из них в собственный класс,
после чего алгоритмы можно взаимозаменять прямо во время исполнения программы.

Пример:
migration бизнес операция на Андорре
построение марштура в зависимости от того, какой он: пеший, на таски, на машине, на гор транспорте...

Применимость:
1) Когда вам нужно использовать разные вариации какого-то алгоритма внутри одного объекта.

2) Когда у вас есть множество похожих классов, отличающихся только некоторым поведением.

3) Когда вы не хотите обнажать детали реализации алгоритмов для других классов.

4) Когда различные вариации алгоритмов реализованы в виде развесистого условного оператора. Каждая ветка такого оператора представляет собой вариацию алгоритма.

 Шаги реализации:
1 Определите алгоритм, который подвержен частым изменениям.
        Также подойдёт алгоритм, имеющий несколько вариаций, которые выбираются во время выполнения программы.

2 Создайте интерфейс стратегий, описывающий этот алгоритм. Он должен быть общим для всех вариантов алгоритма.

3 Поместите вариации алгоритма в собственные классы, которые реализуют этот интерфейс.

4 В классе контекста создайте поле для хранения ссылки на текущий объект-стратегию, а также метод для её изменения.
    Убедитесь в том, что контекст работает с этим объектом только через общий интерфейс стратегий.

5 Клиенты контекста должны подавать в него соответствующий объект-стратегию, когда хотят,
    чтобы контекст вёл себя определённым образом.