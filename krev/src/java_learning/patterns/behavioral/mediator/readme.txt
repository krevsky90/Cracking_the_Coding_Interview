info:
https://refactoring.guru/ru/design-patterns/mediator

idea:
Паттерн Посредник заставляет объекты общаться не напрямую друг с другом, а через отдельный объект-посредник,
который знает, кому нужно перенаправить тот или иной запрос.
Благодаря этому, компоненты системы будут зависеть только от посредника, а не от десятков других компонентов.

Пример:
10 юзеров и неск чатов
юзер отправляет сообщение в конкретный чат, а посредник знает, кому переслать (каким юзерам)

или когда некий сервис шлет сообщение в медиатор, а медиатор вызывает другие методы других сервисов
тут исходный сервис не знает, кого в итоге дернут,
а тот, кого дернули, не знает, из-за кого это произошло

пример 2:
Пилоты садящихся или улетающих самолётов не общаются напрямую с другими пилотами.
Вместо этого они связываются с диспетчером, который координирует действия нескольких самолётов одновременно.
Без диспетчера пилотам приходилось бы все время быть начеку и следить за всеми окружающими самолётами самостоятельно


Применимость:
1) Когда вам сложно менять некоторые классы из-за того, что они имеют множество хаотичных связей с другими классами.

2) Когда вы не можете повторно использовать класс, поскольку он зависит от уймы других классов.
(это случай UI, когда куча кнопок-объектов. не совсем понимаю тут)

3) Когда вам приходится создавать множество подклассов компонентов, чтобы использовать одни и те же компоненты в разных контекстах.

Как строить:
1) Создайте общий интерфейс посредников и опишите в нём методы для взаимодействия с компонентами.
В простейшем случае достаточно одного метода для получения оповещений от компонентов.

2) Реализуйте этот интерфейс в классе конкретного посредника.
Поместите в него поля, которые будут содержать ссылки на все объекты компонентов.

3) (опционально) Можно создавать компоненты прямо в классе посредника

4) Компоненты тоже должны иметь ссылку на объект посредника.
Логично создать общий интерфейс для компонентов (к-ый содержит метод setMediator)
Связь между ними удобнее всего установить, подавая посредника в параметры конструктора компонентов.

5) Измените код компонентов так, чтобы они вызывали метод оповещения посредника, вместо методов других компонентов.
А посредник должен вызывать методы нужного компонента, когда получает оповещение от компонента.