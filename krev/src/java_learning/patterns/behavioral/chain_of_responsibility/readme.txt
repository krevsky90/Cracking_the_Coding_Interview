info:
https://refactoring.guru/ru/design-patterns/chain-of-responsibility

idea:
Цепочка обязанностей базируется на том, чтобы превратить отдельные поведения в объекты.
В нашем случае каждая проверка переедет в отдельный класс с единственным методом выполнения.
Данные запроса, над которым происходит проверка, будут передаваться в метод как аргументы.


Применимость:
1) Когда программа должна обрабатывать разнообразные запросы несколькими способами,
но заранее неизвестно, какие конкретно запросы будут приходить и какие обработчики для них понадобятся.

2) Когда важно, чтобы обработчики выполнялись один за другим в строгом порядке.

3) Когда набор объектов, способных обработать запрос, должен задаваться динамически.

Как строить:
создать абстрактный класс (интерфейс в общем-то и не нужен) с полем next и setNext(..)
а также методом вида
protected boolean checkNext(Request request) {
    //if current validation passed => give request to the next validator
    if (next != null) {
        return next.check(request);
    } else {
        return true;
    }
}
к-ый будет вызываться из check(..) метода
